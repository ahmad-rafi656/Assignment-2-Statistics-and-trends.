# -*- coding: utf-8 -*-
"""Assigment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzZho8QpbN7oqEY-rKr7DPRcm7jdZm0Y

### Importing Important Libraries
"""

import pandas as pd # import panda library as pd for data manipulation
import matplotlib.pyplot as plt # import matplotlib as plt for data visualitzation
from matplotlib import style
import numpy as np # import nump as np
import seaborn as sns # seaborn is data visualization library build on matplotlib
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

"""### Implement a Function Which return Original DataFrame, Transposed DataFrames"""

def transpose_file(filename: str):

    # Read the file into a pandas dataframe
    dataframe = pd.read_csv(filename)

    # Transpose the dataframe
    df_transposed = dataframe.transpose()

    # Populate the header of the transposed dataframe with the header information

    # silice the dataframe to get the year as columns
    df_transposed.columns = df_transposed.iloc[1]

    # As year is now columns so we don't need it as rows
    transposed_year = df_transposed[0:].drop('year')

    # silice the dataframe to get the country as columns
    df_transposed.columns = df_transposed.iloc[0]

    # As country is now columns so we don't need it as rows
    transposed_country = df_transposed[0:].drop('country')

    return dataframe, transposed_country, transposed_year

# Passing filename to Real Worldbank data function
# will return three dataframe:
# org dataframe, transposed country as columns and transposed year as column

org_df, df_by_country, df_by_year = transpose_file('/content/world_bank_dataset.csv')

"""### Original DataFrame"""

# show the first 5 row
org_df.head(5)

"""### show the statistics of Original Data"""

org_df.describe() #describe method show the statistic of dataframe

"""### DataFrame In Which Countries are Columns"""

# show the first 5 row
df_by_country.head(5)

"""### DataFrame In Which Year are Columns"""

# show the first 5 row
df_by_year

org_df.columns

"""### Create DataFrame related to Alternative Energy
### For All the countries and years
"""

# we want to see countries alternative_energy over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
alternative_energy = org_df[['country', 'year', 'alternative_energy']].dropna()

"""### Get Data to Specific Years from 1990 to 2020"""

import random

# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

org_df.country.unique()

"""### Plot Barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = alternative_energy[alternative_energy['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['alternative_energy'], color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("Alternative and Nuclear Energy", fontsize=15)

# Add country names to the x-axis ticks
countries = ('Bhutan', 'Djibouti', 'Kiribati', 'Kuwait', 'Lebanon',
       'Liechtenstein', 'Marshall Islands', 'Mauritius', 'Malaysia',
       'Palau', 'Vanuatu')
plt.xticks(np.arange(len(countries)) + 0.2, countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

org_df.columns

"""### Get data of renewable_electricity over the years"""

# we want to see countries renewable_electricity over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
renewable_electricity = org_df[['country', 'year', 'renewable_electricity']].dropna()

"""### Filter from specific year from 1990 to 2020"""

import random

# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

renewable_electricity.country.unique()

"""### PLOT barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = renewable_electricity[renewable_electricity['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['renewable_electricity'], color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("Renewable Electricity", fontsize=15)

# Add country names to the x-axis ticks
countries = ('Bhutan', 'Djibouti', 'Kiribati', 'Kuwait', 'Lebanon',
       'Liechtenstein', 'Marshall Islands', 'Mauritius', 'Malaysia',
       'Palau', 'Vanuatu')
plt.xticks(np.arange(len(countries)) + 0.2, countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

renewable_electricity.country.unique()

"""### Making a DataFrame related to Kuwait Data"""

# making dataframe of Kuwait data from the original dataframe
kw = org_df[org_df['country'] == 'Kuwait']

"""### Implement a Function which removes Null values and return clean data"""

def remove_null_values(feature):
    return np.array(feature.dropna())

"""### For the Features Present In sa DataFrame remove the null values
### Print Each Features Size
"""

# List of columns to extract
columns_of_interest = ['expenses', 'co2_emissions',
       'greenhouse_gas_emissions', 'total_population',
       'population_growth',
       'current_account_balance']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(kw[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 15

# Create the DataFrame using dictionary comprehension
kw_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = kw_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='YlGnBu', fmt=".2f")
plt.title('Correlation Heatmap for Kuwait Features')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to Vanuatu"""

# making dataframe of Vanuatu data from the original dataframe
va = org_df[org_df['country'] == 'Vanuatu']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

va.columns

# List of columns to extract
columns_of_interest = ['expenses', 'co2_emissions',
       'greenhouse_gas_emissions', 'renewable_electricity', 'total_population',
       'population_growth', 'renewable_energy_consumption', 'urban_population',
        'current_account_balance']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(va[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 18

# Create the DataFrame using dictionary comprehension
va_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = va_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt=".2f")
plt.title('Correlation Heatmap for Vanuatu Features')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to Vanuatu"""

# making dataframe of Lebanon data from the original dataframe
la = org_df[org_df['country'] == 'Lebanon']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

la.columns

# List of columns to extract
columns_of_interest = ['expenses', 'co2_emissions',
       'greenhouse_gas_emissions', 'renewable_electricity', 'total_population',
       'population_growth', 'renewable_energy_consumption', 'urban_population',
       'alternative_energy', 'current_account_balance']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(la[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 19

# Create the DataFrame using dictionary comprehension
la_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = la_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Greens', fmt=".2f")
plt.title('Correlation Heatmap for Lebanon Features')
plt.show()

correlation_matrix

org_df.columns

"""### Get the Year, Country Data Related to population_growth"""

# we want to see countries population_growth over the years
# we need to filter our original data frame to get specific fields
population_growth_df = org_df[['country','year','population_growth']]

# drop the null values present in the dataset
population_growth_df  = population_growth_df.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of population_growth"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot population_growth over the years
for country in countries:
    country_data = population_growth_df[population_growth_df['country'] == country]
    plt.plot(country_data['year'], country_data['population_growth'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Population Growth")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

"""### Get the Year, Country Data Related to Greenhouse gas emissions"""

# we want to see countries greenhouse_gas_emissions over the years
# we need to filter our original data frame to get specific fields
greenhouse_gas_emissions_df = org_df[['country','year','greenhouse_gas_emissions']]

# drop the null values present in the dataset
greenhouse_gas_emissions_df  = greenhouse_gas_emissions_df.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of population_growth"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot greenhouse_gas_emissions_df over the years
for country in countries:
    country_data = greenhouse_gas_emissions_df[greenhouse_gas_emissions_df['country'] == country]
    plt.plot(country_data['year'], country_data['greenhouse_gas_emissions'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Greenhouse gas emissions")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

org_df.columns

# we want to see countries current_account_balance over the years
current_account_balance = org_df[['country','year','current_account_balance']]

# drop the null values present in the dataset
current_account_balance = current_account_balance.dropna()

### Filter from specific year from 1990 to 2015
# filter data related to 1990
current_account_balance_1990 = current_account_balance[current_account_balance['year'] == 1990]

# filter data related to 2010
current_account_balance_2010 = current_account_balance[current_account_balance['year'] == 2010]

# filter data related to 2020
current_account_balance_2020 = current_account_balance[current_account_balance['year'] == 2020]

current_account_balance_1990

current_account_balance_2010

current_account_balance_2020